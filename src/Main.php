<?php

declare(strict_types=1);

namespace pixelwhiz\minecart;

use pixelwhiz\minecart\BaseMinecart;
use pocketmine\data\bedrock\EffectIdMap;
use pocketmine\entity\effect\EffectInstance;
use pocketmine\entity\Entity;
use pocketmine\entity\EntityDataHelper;
use pocketmine\entity\EntityFactory;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityMotionEvent;
use pocketmine\event\entity\EntityTeleportEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerBedLeaveEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\event\player\PlayerItemUseEvent;
use pocketmine\event\player\PlayerJumpEvent;
use pocketmine\event\player\PlayerMoveEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\player\PlayerToggleSneakEvent;
use pocketmine\event\server\DataPacketReceiveEvent;
use pocketmine\item\Minecart;
use pocketmine\item\StringToItemParser;
use pocketmine\item\VanillaItems;
use pocketmine\nbt\NBT;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\nbt\tag\DoubleTag;
use pocketmine\nbt\tag\FloatTag;
use pocketmine\nbt\tag\ListTag;
use pocketmine\network\mcpe\NetworkBroadcastUtils;
use pocketmine\network\mcpe\protocol\ActorEventPacket;
use pocketmine\network\mcpe\protocol\AddActorPacket;
use pocketmine\network\mcpe\protocol\AddEntityPacket;
use pocketmine\network\mcpe\protocol\PlayerAuthInputPacket;
use pocketmine\network\mcpe\protocol\SetActorLinkPacket;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityLink;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\network\mcpe\protocol\types\entity\LongMetadataProperty;
use pocketmine\network\mcpe\protocol\types\entity\MetadataProperty;
use pocketmine\network\mcpe\protocol\types\entity\PropertySyncData;
use pocketmine\network\protocol\EntityEventPacket;
use pocketmine\network\protocol\InteractPacket;
use pocketmine\network\protocol\PlayerActionPacket;
use pocketmine\network\protocol\PlayerInputPacket;
use pocketmine\network\protocol\SetEntityLinkPacket;
use pocketmine\player\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;

use pocketmine\world\Position;
use pocketmine\world\World;
use pocketmine\math\Vector3;

class Main extends PluginBase implements Listener {

    private array $ridden_minecart = [];
    private array $minecart = [];

    public static Main $instance;

    public static function getInstance() : Main {
        return self::$instance;
    }

    public function isRidding(Player $player): bool {
        return isset($this->ridden_minecart[$player->getName()]);
    }

    public function getRiddenMinecart(Player $owner): null|BaseMinecart {
        return $this->ridden_minecart[$owner->getName()] ?? null;
    }

    public function getPlayerByMinecart(BaseMinecart $entity) : null|Player {
        return $this->minecart[$entity->getId()] ?? null;
    }

    public function onEnable(): void
    {
        parent::onEnable(); // TODO: Change the autogenerated stub
        self::$instance = $this;
        Server::getInstance()->getPluginManager()->registerEvents($this, $this);
        EntityFactory::getInstance()->register(BaseMinecart::class, function (World $world, CompoundTag $nbt): Entity {
            return new BaseMinecart(EntityDataHelper::parseLocation($nbt, $world), $nbt);
        }, ["BaseMinecart"]);
    }

    public function onHit(EntityDamageByEntityEvent $event) {
        $entity = $event->getEntity();
        if ($entity instanceof BaseMinecart) {
            $event->cancel();
        }
        if ($event instanceof EntityDamageByEntityEvent) {
            if ($entity instanceof BaseMinecart) {
                $damager = $event->getDamager();
                if ($damager instanceof Player) {
                    if ($damager->getInventory()->getItemInHand()->getTypeId() === StringToItemParser::getInstance()->parse("saddle")->getTypeId()) {
                        $pos = $entity->getPosition();
                        $this->setRideMinecartToPlayer($damager, Server::getInstance()->getOnlinePlayers(), $entity, new Position($pos->getX(), $pos->getY(), $pos->getZ(), $this->getServer()->getWorldManager()->getWorldByName($damager->getWorld()->getFolderName())));
                        $event->cancel();
                        return false;
                    }

                    $entity->kill();
                    $entity->flagForDespawn();
                    $damager->getInventory()->addItem(VanillaItems::MINECART());
                }
            }
        }
    }

    public function onEntityMove(EntityMotionEvent $event) {
        $entity = $event->getEntity();
        if (!$entity instanceof BaseMinecart) return false;
        if ($entity->shouldJump()) {
            $entity->jump();
        }
    }

    public function onReceive(DataPacketReceiveEvent $event) : void {
        $packet = $event->getPacket();
        $player = $event->getOrigin()->getPlayer();

        if ($player === null) {
            return;
        }

        if ($packet instanceof PlayerAuthInputPacket) {
            if (Main::getInstance()->getRiddenMinecart($player)) {
                if ($packet->getMoveVecX() === 0.0 and $packet->getMoveVecZ() === 0.0) {
                    return;
                }

                $event->cancel();
                $entity = $this->getRiddenMinecart($player);
                $entity?->walk($packet->getMoveVecX(), $packet->getMoveVecZ(), $player);
            }
        } elseif ($packet instanceof PlayerActionPacket) {
            $entity = $this->getRiddenMinecart($player);
            if ($packet->action === PlayerActionPacket::ACTION_START_SNEAK && $entity instanceof BaseMinecart) {
                $event->cancel();
                $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
            }
        } elseif ($packet instanceof InteractPacket) {
            if ($packet->action === InteractPacket::ACTION_LEAVE_VEHICLE) {
                $entity = $this->getServer()->getWorldManager()->findEntity($packet->target);
                if ($entity instanceof BaseMinecart) {
                    $event->cancel();
                    $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
                }
            }
        }

    }

    public function onJump(PlayerJumpEvent $event) {
        $player = $event->getPlayer();
        $entity = $this->getRiddenMinecart($player);
        if ($entity instanceof BaseMinecart) {
            $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
        }
    }


    public function onSneak(PlayerToggleSneakEvent $event)
    {
        $player = $event->getPlayer();
        if ($player->isSneaking()) {
            if ($this->isRidding($player)) {
                $entity = $this->getRiddenMinecart($player);
                if ($entity instanceof BaseMinecart) {
                    $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
                    return;
                }
            }
        }
    }

    public function onTeleport(EntityTeleportEvent $event) {
        $player = $event->getEntity();
        if ($player instanceof Player) {
            $entity = $this->getRiddenMinecart($player);
            if ($entity instanceof BaseMinecart) {
                $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
            }
        }
    }

    public function onQuit(PlayerQuitEvent $event) {
        $player = $event->getPlayer();
        $entity = $this->getRiddenMinecart($player);
        if ($entity instanceof BaseMinecart) {
            $this->setUnRideMinecartToPlayer($player, Server::getInstance()->getOnlinePlayers(), $entity);
        }
    }

    public function onUse(PlayerItemUseEvent $event) {
        $player = $event->getPlayer();
        $item = $event->getItem();
        if ($item->getTypeId() === VanillaItems::MINECART()->getTypeId()) {
            $this->spawnMinecartToPlayer($player);
        }
    }

    public function setUnRideMinecartToPlayer(Player $player, array $viewers, BaseMinecart $entity) {
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::RIDING, false);
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::SADDLED, false);
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::WASD_CONTROLLED, false);
        $player->getNetworkProperties()->setVector3(EntityMetadataProperties::RIDER_SEAT_POSITION, new Vector3(0, 0, 0));
        $pk = new SetActorLinkPacket();
        $pk->link = new EntityLink($entity->getId(), $player->getId(), EntityLink::TYPE_REMOVE, false, false);
        NetworkBroadcastUtils::broadcastPackets(Server::getInstance()->getOnlinePlayers(), [$pk]);
        unset($this->ridden_minecart[$player->getName()]);
    }

    public function setRideMinecartToPlayer(Player $player, array $viewers, BaseMinecart $entity, Position $pos) {
        $link = new SetActorLinkPacket();
        $link->link = new EntityLink($entity->getId(), $player->getId(), EntityLink::TYPE_RIDER, true, true);
        $player->getNetworkProperties()->setVector3(EntityMetadataProperties::RIDER_SEAT_POSITION, new Vector3(0, $entity->getSize()->getHeight(), 0));
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::RIDING, true);
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::SADDLED, true);
        $player->getNetworkProperties()->setGenericFlag(EntityMetadataFlags::WASD_CONTROLLED, true);
        $this->ridden_minecart[$player->getName()] = $entity;
        $player->sendMessage("riding minecarts");
        NetworkBroadcastUtils::broadcastPackets($viewers, [$link]);
    }

    public function spawnMinecartToPlayer(Player $player) {
        $x = $player->getLocation()->getX();
        $z = $player->getLocation()->getZ();
        $nbt = $this->createBaseNBT($player->getLocation(), null, rad2deg(atan2(-$x, $z)), 0.0);
        $entity = new BaseMinecart($player->getLocation(), $nbt);
        $entity->addMotion(0.0, 1, 0.0);
        $entity->spawnToAll();
        $player->getInventory()->setItemInHand($player->getInventory()->getItemInHand()->setCount($player->getInventory()->getItemInHand()->getCount() - 1));
        $player->sendMessage("Entity spawn successfully");
    }

    public function createBaseNBT(Vector3 $pos, ?Vector3 $motion = null, float $yaw = 0.0, float $pitch = 0.0): CompoundTag {
        return CompoundTag::create()
            ->setTag("Pos", new ListTag([
                new DoubleTag($pos->x),
                new DoubleTag($pos->y),
                new DoubleTag($pos->z)
            ]))
            ->setTag("Motion", new ListTag([
                new DoubleTag($motion !== null ? $motion->x : 0.0),
                new DoubleTag($motion !== null ? $motion->y : 0.0),
                new DoubleTag($motion !== null ? $motion->z : 0.0)
            ]))
            ->setTag("Rotation", new ListTag([
                new FloatTag($yaw),
                new FloatTag($pitch)
            ]));
    }

}
